import { useQuery, useMutation } from '@tanstack/vue-query'

export function qryo(query: any, queryOptions: any = {}) {
  const injectedSDK = undefined

  if (action.startsWith('update')) {
    return useMutation({
      mutationFn: async (updateData) => {
        // @ts-ignore
        return { mutate: () => { console.log('updated nothing, but called', updateData) } }
        // return injectedSDK.items(collection)[action](...key, updateData)
      },
      ... queryOptions
    })
  }
  else if (action.startsWith('create')) {
    return useMutation({
      mutationFn: async (createData) => {
        // @ts-ignore
        return injectedSDK.items(collection)[action](createData)
      },
      onMutate: async (createData) => {
        const queryClient = queryOptions.queryClient

        // TODO: get this from mutation context
        const createDataWithId = { id: Date.now(), ...createData }

        // Cancel any outgoing refetches
        // (so they don't overwrite our optimistic update)
        await queryClient.cancelQueries({ queryKey: [ collection, ...key ] })

        // Snapshot the previous value
        const previousTodos = queryClient.getQueryData([ collection, ...key ])

        // Optimistically update to the new value
        queryClient.setQueryData([ collection, ...key ], (old: any) => {
          return [...old, createDataWithId]
        })

        // Return a context object with the snapshotted value
        return { previousTodos }
      },
      // If the mutation fails,
      // use the context returned from onMutate to roll back
      onError: (err, newTodo, context) => {
        const queryClient = queryOptions.queryClient
        queryClient.setQueryData([ collection, ...key ], context!.previousTodos)
      },
      // Always refetch after error or success:
      onSettled: () => {
        const queryClient = queryOptions.queryClient
        queryClient.invalidateQueries({ queryKey: [ collection, ...key ] })
      },
      ... queryOptions
    })
  }
  else if (action.startsWith('delete')) {
    return useMutation({
      mutationFn: async (itemId: string | number) => {
        // @ts-ignore
        return injectedSDK.items(collection)[action](itemId)
      },
      onMutate: async (itemId) => {
        const queryClient = queryOptions.queryClient

        // Cancel any outgoing refetches
        // (so they don't overwrite our optimistic update)
        await queryClient.cancelQueries({ queryKey: [ collection, ...key ] })

        // Snapshot the previous value
        const previousTodos = queryClient.getQueryData([ collection, ...key ])

        // Optimistically update to the new value
        queryClient.setQueryData([ collection, ...key ], (old: any) => {

          const newOld = old.filter(obj => obj.id !== itemId)
          console.log('old', newOld)
          return newOld
        })

        // Return a context object with the snapshotted value
        return { previousTodos }
      },
      // If the mutation fails,
      // use the context returned from onMutate to roll back
      onError: (err, newTodo, context) => {
        const queryClient = queryOptions.queryClient
        queryClient.setQueryData([ collection, ...key ], context!.previousTodos)
      },
      // Always refetch after error or success:
      onSettled: () => {
        const queryClient = queryOptions.queryClient
        queryClient.invalidateQueries({ queryKey: [ collection, ...key ] })
      },
      ... queryOptions
    })
  }
  else { // if (action.startsWith('read')) {
    return useQuery({
      queryKey: [collection, ...key],
      queryFn: async () => {
        // @ts-ignore
        const run = await injectedSDK.items(collection)[action](...key)

        return action === 'readByQuery' ? run.data : run
      },
      ... queryOptions
    })
  }
}
